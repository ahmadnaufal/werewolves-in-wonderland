/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package werewolvesinwonderland.client.view;

import java.awt.BorderLayout;
import java.awt.Dialog;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import werewolvesinwonderland.client.ClientController;
import werewolvesinwonderland.client.ClientSender;
import werewolvesinwonderland.client.view.NewGameDialog.NewGameDialogListener;
/**
 *
 * @author Tifani
 */
public class GameFrame extends javax.swing.JFrame implements NewGameDialogListener {

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
        ImageIcon img = new ImageIcon(getClass().getResource("/werewolvesinwonderland/client/assets/icon_werewolf.png"));
        this.setIconImage(img.getImage());
        this.setTitle("Werewolf in Wonderland");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        bgHome = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setLayout(new java.awt.CardLayout());

        homePanel.setLayout(null);

        btnStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/werewolvesinwonderland/client/assets/btn_start.png"))); // NOI18N
        btnStart.setBorder(null);
        btnStart.setBorderPainted(false);
        btnStart.setContentAreaFilled(false);
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
        });
        homePanel.add(btnStart);
        btnStart.setBounds(580, 610, 211, 75);

        bgHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/werewolvesinwonderland/client/assets/bg_home.png"))); // NOI18N
        homePanel.add(bgHome);
        bgHome.setBounds(0, 0, 1370, 760);

        mainPanel.add(homePanel, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1366, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMouseClicked
        new NewGameDialog(this);
    }//GEN-LAST:event_btnStartMouseClicked

    private ClientController clientController = null;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgHome;
    private javax.swing.JButton btnStart;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onJoinGameButtonClicked(String username, String serverAddress, int serverPort, int clientPort) {
        System.out.println(NewGameDialog.class.getSimpleName() +
                    ": [Join Game] " +
                    "Username: " + username + ", " +
                    "Server Address: " + serverAddress + ", " +
                    "Server Port: " + serverPort + ", " +
                    "Client Port: " + clientPort);
        
        clientController = new ClientController(serverAddress, serverPort, clientPort);
        clientController.initClientConnection();

        JDialog dlgProgress = createProgressDialog();

        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // TODO: Request join game
                return null;
            }

            @Override
            protected void done() {
                dlgProgress.dispose();//close the modal dialog
            }
        };

        sw.execute(); // this will start the processing on a separate thread
        dlgProgress.setVisible(true); //this will block user input as long as the processing task is working
    }
    
    private JDialog createProgressDialog() {
        JDialog dlgProgress = new JDialog(this, "Please wait...", true);//true means that the dialog created is modal
        JLabel lblStatus = new JLabel("Working..."); // this is just a label in which you can indicate the state of the processing
        dlgProgress.setLocationRelativeTo(null);
        dlgProgress.setUndecorated(true);

        JProgressBar pbProgress = new JProgressBar(0, 100);
        pbProgress.setIndeterminate(true); //we'll use an indeterminate progress bar

        dlgProgress.add(BorderLayout.NORTH, lblStatus);
        dlgProgress.add(BorderLayout.CENTER, pbProgress);
        dlgProgress.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE); // prevent the user from closing the dialog
        dlgProgress.setSize(300, 90);
        return dlgProgress;
    }
    
}
